version: '3.8'

services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  # Note: Database schema is managed by Alembic migrations, not init scripts.
  # Migrations run automatically when the backend service starts.
  # See docs/auto-migrations.md for details.
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: org-archivist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-org_archivist}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Init scripts removed - schema managed by Alembic migrations
      # See backend/alembic/versions/ for migration files
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-org_archivist}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - org-archivist-network

  # =============================================================================
  # Qdrant Vector Database
  # =============================================================================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: org-archivist-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"      # HTTP API
      - "${QDRANT_GRPC_PORT:-6334}:6334" # gRPC API
    volumes:
      - qdrant_storage:/qdrant/storage
      - ./docker/qdrant/config:/qdrant/config:ro
    environment:
      # Qdrant configuration
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Optional: API key for Qdrant (if needed)
      # QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY}
    # Health check disabled - Qdrant container lacks wget/curl
    # Qdrant is monitored via backend application health checks instead
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/ || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    networks:
      - org-archivist-network

  # =============================================================================
  # FastAPI Backend
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: org-archivist-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      VOYAGE_API_KEY: ${VOYAGE_API_KEY:-}
      # Embedding configuration
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-openai}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-small}
      EMBEDDING_DIMENSIONS: ${EMBEDDING_DIMENSIONS:-1536}
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-org_archivist}
      # Qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME:-foundation_docs}
      # Claude Model Configuration
      CLAUDE_MODEL: ${CLAUDE_MODEL:-claude-sonnet-4-20250514}
      CLAUDE_TEMPERATURE: ${CLAUDE_TEMPERATURE:-0.7}
      CLAUDE_MAX_TOKENS: ${CLAUDE_MAX_TOKENS:-4096}
      # RAG Pipeline Configuration
      CHUNK_SIZE: ${CHUNK_SIZE:-512}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-50}
      TOP_K: ${TOP_K:-5}
      VECTOR_SEARCH_WEIGHT: ${VECTOR_SEARCH_WEIGHT:-0.7}
      KEYWORD_SEARCH_WEIGHT: ${KEYWORD_SEARCH_WEIGHT:-0.3}
      RECENCY_WEIGHT: ${RECENCY_WEIGHT:-0.5}
      # File Upload Configuration
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-10}
      ALLOWED_FILE_EXTENSIONS: ${ALLOWED_FILE_EXTENSIONS:-.pdf,.docx,.txt}
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:8501,http://localhost:3000}
    volumes:
      # Mount backend code for development (hot reload)
      - ./backend/app:/app/app
      # Mount document storage
      - ./data/documents:/app/documents
      # Mount logs directory
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - org-archivist-network

  # =============================================================================
  # Streamlit Frontend (commented out - will be added in later task)
  # =============================================================================
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: org-archivist-frontend
  #   restart: unless-stopped
  #   ports:
  #     - "${FRONTEND_PORT:-8501}:8501"
  #   environment:
  #     BACKEND_URL: ${BACKEND_URL:-http://backend:8000}
  #   volumes:
  #     - ./frontend:/app
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8501/_stcore/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   networks:
  #     - org-archivist-network

# =============================================================================
# Networks
# =============================================================================
networks:
  org-archivist-network:
    name: org-archivist-network
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    name: org-archivist-postgres-data
    driver: local
  qdrant_storage:
    name: org-archivist-qdrant-storage
    driver: local
